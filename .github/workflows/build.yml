---
name: Build

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Module Build
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "::set-output name=sha::$(git rev-parse --verify --quiet HEAD^)"

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.1
        with:
          version-command: |
            bash -o pipefail -c "poetry version | awk '{ print \$2 }'"

      - name: Bump version for developmental release
        if: '! steps.check-version.outputs.tag'
        run: |
          poetry version patch &&
          version=$(poetry version | awk '{ print $2 }') &&
          poetry version $version.dev.$(date +%s)

      - name: Build package
        run: |
          poetry build --ansi

      - name: Upload package
        uses: 'actions/upload-artifact@v2.3.1'
        with:
          name: PythonModule
          path: dist/

  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: '3.10', os: ubuntu-latest, session: 'pre-commit' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'safety' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'mypy' }
          - { python-version: '3.9', os: ubuntu-latest, session: 'mypy' }
          - { python-version: '3.8', os: ubuntu-latest, session: 'mypy' }
          - { python-version: '3.7', os: ubuntu-latest, session: 'mypy' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'tests' }
          - { python-version: '3.9', os: ubuntu-latest, session: 'tests' }
          - { python-version: '3.8', os: ubuntu-latest, session: 'tests' }
          - { python-version: '3.7', os: ubuntu-latest, session: 'tests' }
          - { python-version: '3.10', os: windows-latest, session: 'tests' }
          - { python-version: '3.10', os: macos-latest, session: 'tests' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'typeguard' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'xdoctest' }
          - { python-version: '3.10', os: ubuntu-latest, session: 'docs-build' }

    env:
      NOXSESSION: ${{ matrix.session }}

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys
          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])
          print("::set-output name=result::{}".format(result))

      - name: Restore pre-commit cache
        uses: actions/cache@v2.1.7
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-

      - name: Run Nox
        run: |
          nox --force-color --python=${{ matrix.python-version }}

      - name: Upload coverage data
        if: always() && matrix.session == 'tests'
        uses: 'actions/upload-artifact@v2.3.1'
        with:
          name: coverage-data
          path: '.coverage.*'

      - name: Upload documentation
        if: matrix.session == 'docs-build'
        uses: actions/upload-artifact@v2.3.1
        with:
          name: docs
          path: docs/_build

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.3.4

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version

      - name: Install Poetry
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt poetry
          poetry --version

      - name: Install Nox
        run: |
          pipx install --pip-args=--constraint=.github/workflows/constraints.txt nox
          pipx inject --pip-args=--constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version

      - name: Download coverage data
        uses: actions/download-artifact@v2.1.0
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: |
          nox --force-color --session=coverage

      - name: Create coverage report
        run: |
          nox --force-color --session=coverage -- xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v2.1.0

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5.18.1
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: '${{ steps.check-version.outputs.tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{Â secrets.GITHUB_TOKEN }}

  deployGHPages:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Download Artifact with Pages
        uses: actions/download-artifact@v2.1.0
        with:
          name: docs
          path: docs/_build

      - name: Deploy to GitHub Pages
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: juergen.muelbert@gmail.com
          build_dir: docs/_build

  deployPrereleases:
    name: Deploy Pre-Release
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - build
      - tests
      - deployGHPages

    steps:
      - name: Restore Build Python Module
        uses: actions/download-artifact@v2.1.0
        with:
          name: PythonModule
          path: dist/

      - name: Publish package on TestPyPI
        if: '! steps.check-version.outputs.tag'
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: '${{ secrets.TEST_PYPI_TOKEN }}'
          repository_url: https://test.pypi.org/legacy/

  deploy:
    name: Deploy Release on PyPi
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - build
      - tests
      - changeLog
      - releaseNotes
      - deployGHPages

    steps:
      - name: Restore Build Python Module
        uses: actions/download-artifact@v2.1.0
        with:
          name: PythonModule
          path: dist/

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          user: __token__
          password: '${{ secrets.PYPI_TOKEN }}'
