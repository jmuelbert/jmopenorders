shallow_clone: false

matrix:
  fast_finish: true

image:
  - Visual Studio 2019

# What Python version is installed where:
# http://www.appveyor.com/docs/installed-software#python

environment:
  global:
    PYTHONUNBUFFERED: 1
    MINICONDA: C:\\Miniconda3-x64
    PYTHONFAULTHANDLER: 1
    PYTHONIOENCODING: UTF-8

    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:
    # In theory we could use a single CONDA_INSTALL_LOCN because we construct
    # the envs anyway. But using one for the right python version hopefully
    # making things faster due to package caching.
    - PYTHON_VERSION: "3.6"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      TEST_ALL: "no"
      TOXENV: "py36"

    - PYTHON_VERSION: "3.7"
      CONDA_INSTALL_LOCN: "C:\\Miniconda37-x64"
      TEST_ALL: "no"
      TOXENV: "py37"

      # We always use a 64-bit machine, but can build x86 distributions
# with the PYTHON_ARCH variable
platform:
  - x64

# all our python builds have to happen in tests_script...
build: false

init:
  - echo %PYTHON_VERSION% %CONDA_INSTALL_LOCN%

install:
  - set PATH=%CONDA_INSTALL_LOCN%;%CONDA_INSTALL_LOCN%\scripts;%PATH%;
  - set PYTHONUNBUFFERED=1
  - conda config --set always_yes true
  - conda update --all
  - conda config --set show_channel_urls yes
  - conda config --prepend channels conda-forge
  # this is now the downloaded conda...
  - activate
  - conda info -a

  # For building, use a new environment which only includes the requirements for mpl
  # if conda-forge gets a new pyqt, it might be nice to install it as well to have more backends
  # https://github.com/conda-forge/conda-forge.github.io/issues/157#issuecomment-223536381
  - conda env create python=%PYTHON_VERSION% -f environment.yml
  - conda activate jmopenorders
  - echo %PYTHON_VERSION% %TARGET_ARCH%

  # Apply patch to `subprocess` on Python versions > 2 and < 3.6.3
  # https://github.com/matplotlib/matplotlib/issues/9176
  - python -c "import sys; sys.exit(not (3,) < sys.version_info < (3,6,3))" && (
    curl -sL https://github.com/python/cpython/pull/1224.patch |
    patch -fsup 1 -d %CONDA_PREFIX% ) || cmd /c "exit /b 0"

  # Show the installed packages + versions
  - conda list
  - conda update --all
  - conda list # for debug reason

test_script:
  # Now build the thing..
  - set LINK=/LIBPATH:%cd%\lib
  - pip install -ve .
  - tox -e %TOXENV%

after_test:
  - rm -rf tests/coverages
  - if not exist dist mkdir dist
  - tox -e release
  # - tox -e report
  # - if exist .coverage (cp .coverage dist\) else (echo no .coverage)
  # - codecov
  - if exist coverage.xml (cp coverage.xml dist\) else (echo no coverage.xml)
  - "python setup.py bdist_wheel"
  - conda build recipe --no-test
  - conda install -q pytest pytest-cov conda-build anaconda-client
  - conda install --use-local jmopenorders
  - conda info -a

artifacts:
  - path: dist\*
    name: packages

  - path: result_images\*
    name: result_images
    type: zip

on_finish:
  # - pip install codecov
  # - codecov -e PYTHON_VERSION PLATFORM
